CS15050 | Study Abroad | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15050&SEMESTER=S19 | instructors:Cortina, Thomas description:Students who are interested in studying abroad should first contact the Office of International Education. More information on Study Abroad is available on OIEs Study Abroad page and at the CS Undergraduate Office.
CS15051 | Discrete Math Primer | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15051&SEMESTER=F18 | instructors:Sutner, Klaus description:DMP is an online course that introduces students to three foundational topics in mathematics: logic, sets and functions.  The course differs from traditional counterparts in its strong and consistent emphasis on computational aspects.  This approach is particularly suitable for students who are interested in the computational universe, and not just in classical mathematics.  Each of the three modules in DMP ends in a checkpoint, an assessment that helps students evaluate their understanding of the material.  Incoming undergraduate computer science majors are encouraged to take this online course prior to arrival on campus. Additionally, high school students contemplating a computer science or mathematics major may find this course useful.    The course uses Carnegie Mellons OLI system as a delivery platform.
CS15075 | Computer Science Co-Op | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15075&SEMESTER=S19 | instructors:Cortina, Thomas description:This course is meant for CS undergraduate students with a full-time internship that encompasses a summer and a contiguous semester, either Spring-Summer or Summer-Fall who wish to have this recorded on their academic transcript. Units posted for this course do not count toward any requirement for the CS undergraduate degree including free elective units. This course is not available to international students; consult with the Office for International Education for more information.
CS15090 | Computer Science Practicum | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15090&SEMESTER=S19 | instructors:Cortina, Thomas description:This course is for Computer Science students who wish to have an  internship experience as part of their curriculum. Students are required  to write a one-page summary statement prior to registration that  explains how their internship connects with their CS curriculum,  specifically on how it uses material they have learned as well as  prepares them for future courses. Near the end of the internship,  students will be required to submit a reflection paper that describes  the work they did in more detail, including lessons learned about the  work experience and how they utilized their CS education to work  effectively. International students should consult with the Office of  International Education for appropriate paperwork and additional  requirements before registration. Units earned count toward the total  required units necessary for degree completion; students should speak  with an academic advisor for details. This course may be taken at most 3  times for a total of 9 units maximum. Students normally register for  this course for use during the summer semester.
CS15104 | Introduction to Computing for Creative Practice | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15104&SEMESTER=F18 | instructors:Dannenberg, Roger description:[IDeATe portal course] An introduction to fundamental computing principles and programming techniques for creative cultural practices, with special consideration to applications in music, design and the visual arts. Intended for students with little to no prior programming experience, the course develops skills and understanding of text-based programming in a procedural style, including idioms of sequencing, selection, iteration, and recursion. Topics include data organization (arrays, files, trees), interfaces and abstraction (modular software design, using sensor data and software libraries), basic algorithms (searching and sorting), and computational principles (randomness, concurrency, complexity). Intended for students participating in IDeATe courses or minors who have not taken 15-112.
CS15106 | Introduction to Computing for Data Analysis | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15106&SEMESTER=S19 | instructors:Reid-Miller, Margaret description:[Course Pilot] An introductory course in programming for students in statistics-related disciplines using R. Fundamental data types and data structures: booleans, numbers, characters, vectors, matrices, data frames, and lists. Programming constructs: assignment, conditionals, loops, function calls. Processing data: vectorization, apply functions, text processing, plotting tools. Additional topics, time permitting: writing functions, using data files, random number generation and simulation. This course is not for credit for SCS majors.
CS15110 | Principles of Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15110&SEMESTER=S19 | instructors:Kosbie, David description:A course in fundamental computing principles for students with minimal or no  computing background. Programming constructs: sequencing, selection,  iteration, and recursion. Data organization: arrays and lists. Use of  abstraction in computing: data representation, computer organization,  computer networks, functional decomposition, and application programming  interfaces. Use of computational principles in problem-solving: divide and conquer, randomness, and concurrency. Classification of computational problems  based on complexity, non-computable functions, and using heuristics to  find reasonable solutions to complex problems. Social, ethical and legal  issues associated with the development of new computational artifacts will  also be discussed.
CS15112 | Fundamentals of Programming and Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15112&SEMESTER=S19 | instructors:Riley, Ryan description:A technical introduction to the fundamentals of programming with an emphasis  on producing clear, robust, and reasonably efficient code using top-down  design, informal analysis, and effective testing and debugging. Starting  from first principles, we will cover a large subset of the Python  programming language, including its standard libraries and programming  paradigms.  We will also target numerous deployment scenarios, including  standalone programs, shell scripts, and web-based applications.  This course assumes no prior programming experience. Even so, it is a  fast-paced and rigorous preparation for 15-122.  Students seeking a more  gentle introduction to computer science should consider first taking 15-110.    NOTE: students must achieve a C or better in order to use   this course to satisfy the pre-requisite for any subsequent Computer   Science course.
CS15121 | Introduction to Data Structures | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15121&SEMESTER=F18 | instructors:Reid-Miller, Margaret prereq:15112 description:A continuation of the process of program design and analysis for  students with some prior programming experience (functions, loops, and  arrays, not necessarily in Java). The course reinforces object-oriented  programming techniques in Java and covers data aggregates, data  structures (e.g., linked lists, stacks, queues, trees, and graphs), and  an introduction to the analysis of algorithms that operate on those data  structures.
CS15122 | Principles of Imperative Computation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15122&SEMESTER=S19 | instructors:Kaynar, Zeliha DilsunCervesato, Iliano prereq:15112 description:For students with a basic understanding of programming (variables, expressions, loops, arrays, functions). Teaches imperative programming and methods for ensuring the correctness of programs.  Students will learn the process and concepts needed to go from high-level descriptions of algorithms to correct imperative implementations, with specific application to basic data structures and algorithms.  Much of the course will be conducted in a subset of C amenable to verification, with a transition to full C near the end. This course prepares students for 15-213 and 15-210.  NOTE: students must achieve a C or better in order to use  this course to satisfy the pre-requisite for any subsequent Computer Science course.
CS15128 | Freshman Immigration CourseThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15128&SEMESTER=F18 | instructors:Cortina, ThomasCarrasquel, Jacobo description:The Freshman Immigration Course is taken by first-semester Computer Science majors on the Pittsburgh campus. The course is designed to acquaint incoming majors with computer science at CMU. Talks range from historical perspectives in the field to descriptions of the cutting edge research being conducted in the School of Computer Science. Enrollment is limited to SCS Freshmen ONLY.
CS15129 | Freshman Immigration II | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15129&SEMESTER=F18 | instructors:Harras, Khaled description:This course is ONLY offered at Carnegie Mellon in Qatar.    Students and instructors will solve different problems each week by searching the Web and other likely places for answers. The problems will be submitted by other faculty who will grade the quality of the answers. Students will learn strategies and techniques for finding information on the Web more efficiently; learn when to start with a search engine, a subject-oriented directory, or other tools; explore and practice using advanced search syntax for major search engines; experience specialized search engines for images, sound, multimedia, newsgroups, and discussion lists as well as subject-specific search engines; discover valuable resources to help keep you up-to-date in this fast-changing environment.
CS15131 | Great Practical Ideas for Computer ScientistsThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15131&SEMESTER=F18 | instructors:Carrasquel, Jacobo description:THIS COURSE IS OPEN TO CS FRESHMAN ONLY. Throughout your education as a Computer Scientist at Carnegie Mellon, you will take courses on programming, theoretical ideas, logic, systems, etc. As you progress, you will be expected to pick up the so-called tools of the trade. This course is intended to help you learn what you need to know in a friendly, low-stress, high-support way. We will discuss UNIX, LaTeX, debugging and many other essential tools. Laptop required. (Laptops will be available for those without their own laptops.)
CS15150 | Principles of Functional Programming | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15150&SEMESTER=S19 | instructors:Erdmann, MichaelCrary, Karl prereq:(15151 or 21127 or 21128) and (15112) description:An introduction to programming based on a functional model of computation.  The functional model is a natural generalization of algebra in which programs are formulas that describe the output of a computation in terms of its inputs---that is, as a function.  But instead of being confined to real- or complex-valued functions, the functional model extends the algebraic view to a very rich class of data types, including not only aggregates built up from other types, but also functions themselves as values.  This course is an introduction to programming that is focused on the central concepts of function and type.  One major theme is the interplay between inductive types, which are built up incrementally; recursive functions, which compute over inductive types by decomposition; and proof by structural induction, which is used to prove the correctness and time complexity of a recursive function.  Another major theme is the role of types in structuring large programs into separate modules, and the integration of imperative programming through the introduction of data types whose values may be altered during computation.    NOTE: students must achieve a C or better in order to use   this course to satisfy the pre-requisite for any subsequent Computer   Science course.
CS15151 | Mathematical Foundations for Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15151&SEMESTER=F18 | instructors:Mackey, John description:*CS majors only* This course is offered to incoming Computer Science freshmen and focuses on the fundamental concepts in Mathematics that are of particular interest to Computer Science such as logic, sets,induction, functions, and combinatorics. These topics are used as a context in which students learn to formalize arguments using the methods of mathematical proof.  This course uses experimentation and collaboration as ways to gain better understanding of the material.  Open to CS freshmen only. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.
CS15210 | Parallel and Sequential Data Structures and Algorithms | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15210&SEMESTER=S19 | instructors:Oflazer, Kemal prereq:15122 and 15150 description:Teaches students about how to design, analyze, and program algorithms and data structures.  The course emphasizes parallel algorithms and analysis, and how sequential algorithms can be considered a special case.  The course goes into more theoretical content on algorithm analysis than 15-122 and 15-150 while still including a significant programming component and covering a variety of practical applications such as problems in data analysis, graphics, text processing, and the computational sciences.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer  Science course.
CS15213 | Introduction to Computer Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15213&SEMESTER=S19 | instructors:Goldstein, SethLucia, Brandon prereq:15122 description:This course provides a programmers view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. NOTE FOR GRADUATE STUDENTS: This course is not open to graduate students beginning Spring 2015. Graduate students must register for 15-513 instead.
CS15251 | Great Ideas in Theoretical Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15251&SEMESTER=S19 | instructors:Goyal, VipulGuruswami, Venkatesan prereq:(15122 or 15150) and (21127 or 21128 or 15151) description:This course is about how to use theoretical ideas to formulate and solve problems in computer science. It integrates mathematical material with general problem solving techniques and computer science applications. Examples are drawn from algorithms, complexity theory, game theory, probability theory, graph theory, automata theory, algebra, cryptography, and combinatorics. Assignments involve both mathematical proofs and programming.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.
CS15259 | Probability and Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15259&SEMESTER=S19 | instructors:Harchol-Balter, Mor prereq:15251 and 21259 and 21241 description:Probability theory is indispensable in computer science today. In areas such as artificial intelligence and computer science theory, probabilistic reasoning and randomization are central. Within networks and systems, probability is used to model uncertainty and queueing latency. This course gives an introduction to probability as it is used in computer science theory and practice, drawing on applications and current research developments as motivation. The course has 3 parts:  Part I is an introduction to probability, including discrete and continuous random variables, heavy tails, simulation, Laplace transforms, z-transforms, and applications of generating functions.  Part II is an in-depth coverage of concentration inequalities, like the Chernoff bound and SLLN bounds, as well as their use in randomized algorithms.   Part III covers Markov chains (both discrete-time and continuous-time) and stochastic processes and their application to queueing systems performance modeling.   This is a fast-paced class which will cover more material than the other probability options and will cover it in greater depth.
CS15292 | History of Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15292&SEMESTER=S19 | instructors:Cortina, Thomas prereq:(76106 or 76102 or 76101 or 76107 or 76108) and (15150 or 15110 or 15122 or 15112) description:This course traces the history of computational devices, pioneers and principles from the early ages through the present. Topics include early computational devices, mechanical computation in the 19th century, events that led to electronic computing advances in the 20th century, the advent of personal computing and the Internet, and the social, legal and ethical impact of modern computational artifacts. This course also includes a history of programming languages, operating systems, processors and computing platforms. Students should have an introductory exposure to programming prior to taking this course.
CS15294 | Rapid Prototyping Technologies | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15294&SEMESTER=S19 | instructors:Touretzky, David prereq:15104 or 15112 description:This mini-course introduces students to rapid prototyping technologies with a focus on laser cutting and 3D printing.  The course has three components: 1) A survey of rapid prototyping and additive manufacturing technologies, the maker and open source movements, and societal impacts of these technologies; 2) An introduction to the computer science behind these technologies: CAD tools, file formats, slicing algorithms; 3) Hands-on experience with SolidWorks, laser cutting, and 3D printing, culminating in student projects (e.g. artistic creations, functional objects, replicas of famous calculating machines, etc.). Please note that there will be a usage/materials fee for this course.
CS15295 | Competition Programming and Problem Solving | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15295&SEMESTER=S19 | instructors:Sleator, Daniel prereq:15122 description:Each year, Carnegie Mellon fields two teams for participation in the ACM-ICPC Regional Programming Contest. During many recent years, one of those teams has earned the right to represent Carnegie Mellon at the ACM-ICPC World Finals.  This course is a vehicle for those who consistently and rigorously train in preparation for the contests to earn course credit for their effort and achievement.  Preparation involves the study of algorithms, the practice of programming and debugging, the development of test sets, and the growth of team, communication, and problem solving skills.  Neither the course grade nor the number of units earned are dependent on ranking in any contest.  Students are not required to earn course credit to participate in practices or to compete in ACM-ICPC events.
CS15296 | Images of Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15296&SEMESTER=S19 | instructors:Frieze, Carol prereq:76102 or 76107 or 76101 or 76106 or 76108 description:In this research and project based mini we will explore computing from a cultural perspective and look in particular at the images of computing. We will examine how the field is represented in the popular culture of the USA and how such representations might affect public attitudes, access to resources, understanding of computer science, and participation in the field. We will pay particular attention to how bias impacts participation in computing, and address our own biases, especially unconscious bias. We will reflect on some issues often taken for granted e.g. are our attitudes to computing culturally specific or universal?  This course is aimed primarily at students who are interested in exploring some of the broad ethical issues in computer science and who would like to direct their interests towards creative activities for broadening participation in computing. Students will gain experience in teamwork, teaching, and presenting. We will use academic papers, web sites, group discussion/debate and popular media.
CS15300 | Research and Innovation in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15300&SEMESTER=F18 | instructors:Mowry, ToddAldrich, Jonathan prereq:(76101 and 15210 and 15213) or (76101 and 15213 and 15251) or (76101 and 15210 and 15251) description:This Fall course is the first part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science. Course topics will include the following: an overview of important things to know about how research and innovation works in the field of computer science; a survey of the current cutting- edge of computer science research, both here at Carnegie Mellon and elsewhere; critical thinking skills when reading research publications that disagree with each other; strategies for coping with open-ended problems; and technical communication skills for computer scientists. Students will also match up with a faculty mentor for a potential Technology Innovation Project (to be performed in the Spring), put together a detailed plan of attack for that project, and start to get up to speed (including background reading, etc.). This course can be used to satisfy the Technical Communications requirement for the CS major.
CS15312 | Foundations of Programming Languages | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15312&SEMESTER=S19 | instructors:Balzer, StephanieHoffmann, Jan prereq:15210 and 15251 description:This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation.
CS15314 | Programming Language Semantics | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15314&SEMESTER=S19 | instructors:Brookes, Stephen prereq:15150 and 15251 description:This course is designed for advanced undergraduates with interests in  the mathematical and logical foundations of programming languages. The  course introduces the foundational concepts and fundamental techniques  of the most prominent and successful approaches to programming language  semantics that have been developed. Broadly speaking, semantics is  concerned with the provision of mathematical meanings to programs, at an  appropriate level of abstraction, to allow formalization of program  behavior and facilitate proofs of correctness. Our aim is to demonstrate  the utility of a scientific approach to programming and languages. We  focus on the most important and most general frameworks for semantic  description: denotational and operational semantics. These frameworks  are widely applicable and offer complementary approaches to language  definition, with various advantages. We also discuss formal  specifications, and logics of program correctness. We make extensive use  of mathematical and structural induction, and computational induction.  We use semantics to describe program behavior, guide the development of  correct programs, specify and prove the correctness of a compiler,  validate program logics, and derive laws of program equivalence. We  discuss imperative and functional languages, sequential and parallel,  high-level and low-level, as time permits.
CS15317 | Constructive Logic | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15317&SEMESTER=S19 | instructors:Reis, Giselle prereq:15150 description:This multidisciplinary junior-level course is designed to provide a thorough introduction to modern constructive logic, its roots in philosophy, its numerous applications in computer science, and its mathematical properties. Some of the topics to be covered are intuitionistic logic, inductive definitions, functional programming, type theory, realizability, connections between classical and constructive logic, decidable classes.
CS15319 | Cloud Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15319&SEMESTER=S19 | instructors:Sakr, Majd prereq:15213 description:This course gives students an overview of Cloud Computing, which is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. Students will study its enabling technologies, building blocks, and gain hands-on experience through projects utilizing public cloud infrastructures.  Cloud computing services are widely adopted by many organizations across domains.  The course will introduce the cloud and cover the topics of data centers, software stack, virtualization, software defined networks and storage, cloud storage, and programming models. We will start by discussing the clouds motivating factors, benefits, challenges, service models, SLAs and security. We will describe several concepts behind data center design and management, which enable the economic and technological benefits of the cloud paradigm. Next, we will study how CPU, memory and I/O resources, network (SDN) and storage (SDS) are virtualized, and the key role of virtualization to enable the cloud. Subsequently, students will study cloud storage concepts like data distribution, durability, consistency and redundancy. We will discuss distributed file systems, NoSQL databases and object storage using HDFS, CephFS, HBASE, MongoDB, Cassandra, DynamoDB, S3, and Swift as case studies. Finally, students will study the MapReduce, Spark and GraphLab programming models. Students will work with Amazon Web Services and Microsoft Azure, to rent and provision compute resources and then program and deploy applications using these resources. Students will develop and evaluate scaling and load balancing solutions, work with cloud storage systems, and develop applications in several programming paradigms. 15619 students must complete an extra team project which entails designing and implementing a cost- and performance-sensitive web-service for querying big data.
CS15322 | Introduction to Computer Music | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15322&SEMESTER=F18 | instructors:Stiles, Jesse prereq:15112 description:Computers are used to synthesize sound, process signals, and  compose music. Personal computers have replaced studios full of sound  recording and processing equipment, completing a revolution that began with  recording and electronics. In this course, students will learn the  fundamentals of digital audio, basic sound synthesis algorithms, and  techniques for digital audio effects and processing. Students will apply  their knowledge in programming assignments using a very high-level  programming language for sound synthesis and composition. In a final  project, students will demonstrate their mastery of tools and techniques  through music composition or by the implementation of a significant  sound-processing technique.
CS15323 | Computer Music Systems and Information Processing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15323&SEMESTER=S19 | instructors:Dannenberg, Roger prereq:15122 description:This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing.
CS15330 | Introduction to Computer Security | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15330&SEMESTER=F18 | instructors:Parno, BryanSekar, Vyas prereq:15213 description:Security is becoming one of the core requirements in the design of critical systems. This course will introduce students to the intro-level fundamental knowledge of computer security and applied cryptography. Students will learn the basic concepts in computer security including software vulnerability analysis and defense, networking and wireless security, and applied cryptography. Students will also learn the fundamental methodology for how to design and analyze security critical systems.
CS15351 | Algorithms and Advanced Data Structures | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15351&SEMESTER=S19 | instructors:Mohimani, Hosein prereq:15121 or 15122 description:The objective of this course is to study algorithms for general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course may have a few programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead. THIS COURSE IS NOT OPEN TO COMPUTER SCIENCE MAJORS OR MINORS.
CS15354 | Computational Discrete Mathematics | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15354&SEMESTER=F18 | instructors:Sutner, Klaus prereq:15251 or 21228 description:This course is about the computational aspects of some of the standard  concepts of discrete mathematics (relations, functions, logic, graphs,  algebra, automata), with emphasis on efficient algorithms.  We begin  with a brief introduction to computability and computational complexity. Other topics include: iteration, orbits and fixed points, order and equivalence relations, propositional logic and satisfiability testing, finite fields and shift register sequences, finite state machines, and cellular automata.    Computational support for some of the material is available in the form of a Mathematica package.
CS15365 | Experimental Animation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15365&SEMESTER=S19 | instructors:Duesing, JamesHodgins, Jessica prereq:15213 description:This class will explore animation from the students perspective with a sense of investigation toward both form and content. Topics in the class will include non-linear narrative, visual music, puppet and non-traditional materials, manipulation of motion and performance capture data, immersive environments.
CS15381 | Artificial Intelligence: Representation and Problem Solving | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15381&SEMESTER=S19 | instructors:Virtue, Patrick prereq:15122 description:This course is about the theory and practice of Artificial Intelligence. We will study modern techniques for computers to represent task-relevant information and make intelligent (i.e. satisficing or optimal) decisions towards the achievement of goals. The search and problem solving methods are applicable throughout a large range of industrial, civil, medical, financial, robotic, and information systems.  We will investigate questions about AI systems such as: how to represent knowledge, how to effectively generate appropriate sequences of actions and how to search among alternatives to find optimal or near-optimal solutions.  We will also explore how to deal with uncertainty in the world, how to learn from experience, and how to learn decision rules from data.  We expect that by the end of the course students will have a thorough understanding of the algorithmic foundations of AI, how probability and AI are closely interrelated, and how automated agents learn.  We also expect students to acquire a strong appreciation of the big-picture aspects of developing fully autonomous intelligent agents.  Other lectures will introduce additional aspects of AI, including natural language processing, web-based search engines, industrial applications, autonomous robotics, and economic/game-theoretic decision making.
CS15382 | Collective Intelligence | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15382&SEMESTER=S19 | instructors:Di Caro, Gianni prereq:15122 description:This course is about the study of distributed control and intelligence systems involving a large number of autonomous components that interact with each other, dynamically adapting to their changing environment as a result of mutual interactions.  Examples of such components include cars in city traffic, pedestrians moving in crowds, firms competing in a market, ants foraging for food, or mobile robots in a swarm or multi-robot system. Under certain conditions, such systems can produce useful system-level behaviors, display self-organized spatial-temporal patterns, effectively perform computations, information dissemination, and decision-making. Loosely speaking, when this happens we can say that the system is displaying a form of collective intelligence.  Collective intelligence will expose students to relevant mathematical and computational models from following fields and domains: Cellular automata and Random boolean networks, Social choice, Game theory, Distributed consensus, Task allocation, Swarm intelligence, Social networks, Pattern formation, and Self-organizing maps. The course will also help bridge the gap between theory and practice via assignments where students will implement system models and explore their properties in application domains of practical interest.
CS15386 | Neural Computation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15386&SEMESTER=S19 | instructors:Lee, Tai-Sing prereq:21122 and 15112 description:Computational neuroscience is an interdisciplinary science that seeks to understand how the brain computes  to achieve  natural intelligence.  It seeks to understand the computational principles and mechanisms of intelligent behaviors and mental abilities -- such as perception, language, motor control, and learning -- by building artificial systems and computational models with the same capabilities. This course explores how neurons encode and process information, adapt and learn, communicate, cooperate, compete and compute at the individual level as well as at the levels of networks and systems. It will introduce basic concepts in computational modeling, information theory, signal processing, system analysis, statistical and probabilistic inference. Concrete examples will be drawn from the visual system and the motor systems,  and studied from computational, psychological and biological perspectives. Students will learn to perform computational experiments using Matlab and quantitative studies of neurons and neuronal networks.
CS15390 | Entrepreneurship for Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15390&SEMESTER=S19 | instructors:Kaigler, William description:This course is designed to develop skills related to entrepreneurship and innovation for non-business undergraduate and graduate students in the School of Computer Science.  The course assumes no background courses in business and is appropriate for those who are interested in bringing innovations to market either through new companies or existing companies.   The course provides an overview of entrepreneurship and innovation, develops an entrepreneurial frame of mind, and provides a framework for learning the rudiments of how to generate ideas.  Students come up with or are presented with potential ideas and learn how to develop these ideas into opportunities, and to explore their potential for becoming viable businesses.  They learn how to do market research, to develop go-to-market strategies, value propositions and to differentiate their products or services from potential competitors.  The focus is on understanding and developing strategies for approaching the key elements of the entrepreneurial process...opportunity, resources and team. The course consists of a balance of lectures, case studies and encounters with entrepreneurs, investors and business professionals.  The students are exposed to financial and intellectual property issues, and encounter a real world perspective on entrepreneurship, innovation and leadership.  The output of the course is a mini-business plan or venture opportunity screening document that can be developed into a business plan in a subsequent course entitled New Venture Creation or through independent study.
CS15394 | Intermediate Rapid Prototyping | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15394&SEMESTER=S19 | instructors:Touretzky, David prereq:15104 or 15112 description:This course covers additional topics in rapid prototyping beyond the content of 15-294.  Example topics include mechanism design, procedural shape generation using Grasshopper, 3D scanning and mesh manipulation, and advanced SolidWorks concepts. The only prerequisite is basic familiarity with SolidWorks, which can be obtained via 15-294, from other CMU courses, or from online tutorials.
CS15400 | Research Practicum in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15400&SEMESTER=S19 | instructors:Mowry, ToddAldrich, Jonathan prereq:15300 description:This Spring course is the second part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science.  Building directly upon 15-300 (the prerequisite for this course), students will conduct a semester-long independent research project, under the guidance of both the course staff and a faculty project mentor.  The course does not meet for lecture or recitations.  Instead, the students will spend their time working on their research projects, and will also meet with course staff on a bi-weekly basis to discuss their progress.  Students will prepare a written report and a poster presentation at the end of the semester to describe what they have accomplished.
CS15410 | Operating System Design and Implementation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15410&SEMESTER=S19 | instructors:Eckhardt, DavidRailing, Brian prereq:15213 description:Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish).  Work is done in two-person teams, and team programming skills (source control, modularity, documentation) are emphasized.  The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security.  Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2s-complement arithmetic, and translate between C and x86 assembly language.  The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class.  Auditing:  this course is usually full, and we generally receive many more requests to audit than we can accept.  If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals.
CS15411 | Compiler Design | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15411&SEMESTER=F18 | instructors:Hoffmann, Jan prereq:15213 description:This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization.
CS15412 | Operating System Practicum | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15412&SEMESTER=F18 | instructors:Eckhardt, David prereq:15410 description:The goal of this class is for students to acquire hands-on experience with operating-system code as it is developed and deployed in the real world.  Groups of two to four students will select, build, install, and become familiar with an open-source operating system project; propose a significant extension or upgrade to that project; and develop a production-quality implementation meeting the coding standards of that project.  Unless infeasible, the results will be submitted to the project for inclusion in the code base.  Variations on this theme are possible at the discretion of the instructor.  For example, it may be possible to work within the context of a non-operating-system software infrastructure project (window system, web server, or embedded network device kernel) or to extend a 15-410 student kernel.  In some situations students may work alone.  Group membership and unit count (9 units versus 12) will be decided by the third week of the semester.  Contributing to a real-world project will involve engaging in some mixture of messy, potentially open-ended activities such as: learning a revision control system, writing a short design document, creating and updating a simple project plan, participating in an informal code review, synthesizing scattered information about hardware and software, classifying and/or reading large amounts of code written by various people over a long period of time, etc.
CS15414 | Bug Catching: Automated Program Verification | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15414&SEMESTER=F18 | instructors:Fredrikson, MatthewGoncalves Martins, Ruben Carlos prereq:(15122) and (15251) description:Many CS and ECE students will be developing software and hardware that must be ultra reliable at some point in their careers. Logical errors in such designs can be costly, even life threatening. There have already been a number of well publicized errors like the Intel Pentium floating point error and the Arian 5 crash. In this course we will study tools for finding and preventing logical errors. Three types of tools will be studied: automated theorem proving, state exploration techniques like model checking and tools based on static program analysis. Although students will learn the theoretical basis for such tools, the emphasis will be on actually using them on real examples.  This course can be used to satisfy the Logic  Languages requirement for the Computer Science major.
CS15415 | Database ApplicationsThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15415&SEMESTER=F18 | instructors:Faloutsos, Christos prereq:15210 and 15213 description:This course covers the fundamental topics for Database Management  Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data  independence; data definition and data manipulation languages), Data  models (entity-relationship and relational data models; data  structures, integrity constraints, and operations for each data  model; relational query languages: SQL, algebra, calculus), Theory of  database design (functional dependencies; normal forms; dependency  preservation; information loss), Query Optimization (equivalence of  expressions, algebraic manipulation; optimization of selections and  joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).
CS15418 | Parallel Computer Architecture and Programming | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15418&SEMESTER=S19 | instructors:Bryant, RandalBeckmann, Nathan prereq:15213 description:The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project.
CS15424 | Logical Foundations of Cyber-Physical Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15424&SEMESTER=F18 | instructors:Platzer, Andre prereq:(15122) and (21241 or 18202 or 15251) and (21120) description:Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding.  Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP.
CS15439 | Special Topics: Blockchains and CryptocurrenciesThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15439&SEMESTER=S19 | instructors:Goyal, Vipul description:Introduction to Blockchains and Cryptocurrencies. We focus on the cryptographic and mathematical foundations of Blockchains. The course will start from the basics and will cover the latest research in this area towards the end.
CS15440 | Distributed Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15440&SEMESTER=S19 | instructors:Berger, DanielPillai, PadmanabhanSatyanarayanan, Mahadev prereq:15213 description:The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems.  The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects.   As a consequence, competency in both the C and Java programming languages is required.
CS15441 | Computer Networks | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15441&SEMESTER=S19 | instructors:Sherry Martins, JustineSteenkiste, Peter prereq:15213 description:The emphasis in this course will be on the basic performance and engineering trade-offs in the design and implementation of computer networks. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation.    The goal is for students to learn not only what computer networks are and how they work today, but also why they are designed the way they are and how they are likely to evolve in the future. We will draw examples primarily from the Internet. Topics to be covered include: network architecture, routing, congestion/flow/error control, naming and addressing,  peer-to-peer and the web, internetworking, and network security.
CS15445 | Database Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15445&SEMESTER=F18 | instructors:Pavlo, Andrew prereq:15213 description:This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems will be used to illustrate these techniques and trade-offs. The course is appropriate for students with strong systems programming skills.
CS15451 | Algorithm Design and Analysis | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15451&SEMESTER=S19 | instructors:Woodruff, DavidGupta, Anupam prereq:(15210) and (21241) and (15251 or 21228) description:This course is about the design and analysis of algorithms. We study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols.
CS15453 | Formal Languages, Automata, and Computability | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15453&SEMESTER=S19 | instructors:Kapoutsis, Christos prereq:21228 or 15251 description:An introduction to the fundamental ideas and models underlying computing: finite automata, regular sets, pushdown automata, context-free grammars, Turing machines, undecidability, and complexity theory.
CS15455 | Undergraduate Complexity Theory | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15455&SEMESTER=S19 | instructors:Sutner, Klaus prereq:15251 description:Complexity theory is the study of how much of a resource (such as time, space, parallelism, or randomness) is required to perform some of the computations that interest us the most. In a standard algorithms course, one concentrates on giving resource efficient methods to solve interesting problems. In this course, we concentrate on techniques that prove or suggest that there are no efficient methods to solve many important problems.  We will develop the theory of various complexity classes, such as P, NP, co-NP, PH, P, PSPACE, NC, AC, L, NL, UP, RP, BPP, IP, and PCP. We will study techniques to classify problems according to our available taxonomy. By developing a subtle pattern of reductions between classes we will suggest an (as yet unproven) picture of how by using limited amounts of various resources, we limit our computational power.
CS15458 | Discrete Differential Geometry | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15458&SEMESTER=S19 | instructors:Crane, Keenan prereq:(15112 or 15122) and (21241) and (21259) description:Geometry plays a vital role in both engineering and scientific discovery, as well as in our everyday lives via emerging technologies like depth cameras and 3D printing.  This course teaches students how to think about three-dimensional shape, both mathematically and computationally.  Students will get a crash course in differential geometry, and will apply this knowledge to design and implement practical algorithms for 3D geometry processing.  Basic geometric concepts (like curvature) are examined via complementary computational and mathematical points of view, with an emphasis on visual intution and real-world applications.  In homework, students will derive and implement core geometry processing algorithms; they will also explore a topic of their choice in a final class project.  MS and PhD students will complete additional written and coding exercises, and will perform a more comprehensive literature review for their final project.  Topics include curves and surfaces, curvature, connections and parallel transport, exterior calculus, simplicial homology, conformal mapping, finite element methods, and numerical linear algebra; applications include approximation of curvature, curve and surface smoothing, surface parameterization, vector field design, and computation of geodesic distance.
CS15462 | Computer Graphics | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15462&SEMESTER=S19 | instructors:Pollard, Nancy prereq:(15213 and 21240 and 21259) or (15213 and 21259 and 21241) or (18202 and 18213) description:This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing.
CS15463 | Computational Photography | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15463&SEMESTER=F18 | instructors:Gkioulekas, Ioannis prereq:(15213) and (21241 or 18202) and (15462 or 16385 or 16720 or 18793) description:Computational photography is the convergence of computer graphics, computer vision and imaging. Its role is to overcome the limitations of the traditional camera, by combining imaging and computation to enable new and enhanced ways of capturing, representing, and interacting with the physical world.  This advanced undergraduate course provides a comprehensive overview of the state of the art in computational photography. At the start of the course, we will study modern image processing pipelines, including those encountered on mobile phone and DSLR cameras, and advanced image and video editing algorithms. Then we will proceed to learn about the physical and computational aspects of tasks such as 3D scanning, coded photography, lightfield imaging, time-of-flight imaging, VR/AR displays, and computational light transport. Near the end of the course, we will discuss active research topics, such as creating cameras that capture video at the speed of light, cameras that look around walls, or cameras that can see through tissue.  The course has a strong hands-on component, in the form of seven homework assignments and a final project. In the homework assignments, students will have the opportunity to implement many of the techniques covered in the class, by both acquiring their own images of indoor and outdoor scenes and developing the computational tools needed to extract information from them. For their final projects, students will have the choice to use modern sensors provided by the instructors (lightfield cameras, time-of-flight cameras, depth sensors, structured light systems, etc.).  This course requires familarity with linear algebra, calculus, programming, and doing computations with images.  The course does not require prior experience with photography or imaging.
CS15464 | Technical Animation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15464&SEMESTER=S19 | instructors:Pollard, Nancy prereq:15462 description:This course introduces techniques for computer animation such as keyframing, procedural methods, motion capture, and simulation. The course also includes a brief overview of story-boarding, scene composition, lighting and sound track generation. The second half of the course will explore current research topics in computer animation such as dynamic simulation of flexible and rigid objects,automatically generated control systems, and evolution of behaviors. The course should be appropriate for graduate students in all areas and for advanced undergraduates.
CS15466 | Computer Game Programming | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15466&SEMESTER=F18 | instructors:McCann, James prereq:15462 description:The goal of this course is to acquaint students with the code required to turn ideas into games. This includes both runtime systems -- e.g., AI, sound, physics, rendering, and networking -- and the asset pipelines and creative tools that make it possible to author content that uses these systems. In the first part of the course, students will implement small games that focus on specific runtime systems, along with appropriate asset editors or exporters. In the second part, students will work in groups to build a larger, polished, open-ended game project. Students who have completed the course will have the skills required to extend -- or build from scratch -- a modern computer game. Students wishing to take this class should be familiar with the C++ language and a basic understanding of the OpenGL API. If you meet these requirements but have not taken 15-462 (the format prerequisite), please contact the instructor.
CS15469 | Special Topic: Algorithmic Textiles Design: ALG TXTILES DSGN | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15469&SEMESTER=S19 | instructors:McCann, James description:Textile artifacts are -- quite literally -- all around us; from clothing to carpets to car seats. These items are often produced by sophisticated, computer-controlled fabrication machinery. In this course we will discuss everywhere code touches textiles fabrication, including design tools, simulators, and machine control languages. Students will work on a series of multi-week, open-ended projects, where they use code to create patterns for modern sewing/embroidery, weaving, and knitting machines; and then fabricate these patterns in the textiles lab. Students in the 800-level version of the course will additionally be required to create a final project that develops a new algorithm, device, or technique in textiles fabrication.
CS15483 | Truth, Justice, and Algorithms | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15483&SEMESTER=F18 | instructors:Procaccia, ArielPsomas, Christos Alexan prereq:15451 description:Truth, Justice, and Algorithms is an interdisciplinary course that covers selected theoretical topics at the interface of computer science and economics, focusing on the algorithmic side of incentives and fairness.   The courses topics include: computational social choice, e.g., voting rules as maximum likelihood estimators, the axiomatic approach to ranking systems and crowdsourcing, manipulation of elections and ways to circumvent it; cooperative games, focusing on solution concepts such as the core and the Shapley value, and their computation; fair division algorithms for allocating divisible and indivisible goods, and approximate notions of fairness; online matching algorithms (competitive analysis, not dating) and kidney exchange; noncooperative games, including Nash equilibrium and correlated equilibrium, their computation, connections to learning theory, Stackelberg security games, and the price of anarchy in congestion and routing games; and topics in social networks such as the diffusion of technologies and influence maximization.  NOTE: This course is cross-listed with 15-896. Undergraduates may enroll into 15-896 but be aware of work load difference. The two courses are identical in terms of lectures, content, and homework assignments. The only difference is in the final project requirement. In 483, students will prepare a summary of several papers -- this will require 10-20 hours of work. In 896, students will carry out a research project with the goal of obtaining novel results, and present their results in class -- a good project will require 50-60 hours of work. Also note that 483 is 9 units, and 896 is 12 units.
CS15487 | Introduction to Computer Security | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15487&SEMESTER=S19 | instructors:Riley, Ryan prereq:15213 description:This course will introduce students to the fundamentals of computer security and applied cryptography. Topics include software security, networking and wireless security, and applied cryptography. Students will also learn the fundamental methodology for how to design and analyze security critical systems.
CS15494 | Cognitive Robotics: The Future of Robot Toys | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15494&SEMESTER=S19 | instructors:Touretzky, David prereq:15122 description:This course will explore the future of robot toys by analyzing and programming Anki Cozmo, a new robot with built-in artificial intelligence algorithms. Como is distinguished from earlier consumer robots by its reliance on vision as the primary sensing mode and its sophisticated use of A.I. Its capabilities include face and object recognition, map building, path planning, and object pushing and stacking. Although marketed as a pre-programmed childrens toy, Cozmos open source Python SDK allows anyone to develop new software for it, which means it can also be used for robotics education and research. The course will cover robot software architecture, human-robot interaction, perception, and planning algorithms for navigation and manipulation. Prior robotics experience is not required, just strong programming skills.
CS15503 | Introduction to Cryptography | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15503&SEMESTER=F18 | instructors:Goyal, Vipul prereq:15210 and 15251 description:This course is aimed as an introduction to theoretical cryptography for graduate and advanced undergraduate students. We will cover formal definitions of security, as well as constructions of some of the most useful and popular primitives in cryptography: pseudorandom generators, encryption, signatures, zero-knowledge, multi-party computation, etc. In addition, we will cover the necessary number-theoretic background.
CS15513 | Introduction to Computer Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15513&SEMESTER=S19 | instructors:Railing, BrianGoldstein, Seth description:This course provides a programmers view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation.
CS15539 | Computer Science Pedagogy | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15539&SEMESTER=F18 | instructors:Garrod, CharlesHilton, Michael description:A broad introduction to Computer Science Pedagogy. Enrollment by special permission only. In Fall 2018 the topic is CS pedagogy for mobile application software engineering. Students will develop, implement, and test curricular content for a college-level mobile applications software engineering course. Although the course focus is on CS pedagogy and developing curricular content, students will learn some fundamentals of modern mobile application programming.
CS15591 | Independent Study in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15591&SEMESTER=S19 | instructors:Cortina, Thomas description:The School of Computer Science offers Independent Study courses, which allow motivated students to work on projects under the supervision of a faculty advisor while receiving academic credit. Independent studies are usually one semester in duration and require prior approval from the faculty member and the School of Computer Science.
CS15592 | Independent Study in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15592&SEMESTER=S19 | instructors:Cortina, Thomas description:The School of Computer Science offers Independent Study courses, which allow motivated students to work on projects under the supervision of a faculty advisor while receiving academic credit. Independent studies are usually one semester in duration and require prior approval from the faculty member and the School of Computer Science.
CS15593 | Independent Study in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15593&SEMESTER=S19 | instructors:Cortina, Thomas description:The School of Computer Science offers Independent Study courses, which allow motivated students to work on projects under the supervision of a faculty advisor while receiving academic credit. Independent studies are usually one semester in duration and require prior approval from the faculty member and the School of Computer Science.
CS15594 | Independent Study in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15594&SEMESTER=S19 | instructors:Cortina, Thomas description:The School of Computer Science offers Independent Study courses, which allow motivated students to work on projects under the supervision of a faculty advisor while receiving academic credit. Independent studies are usually one semester in duration and require prior approval from the faculty member and the School of Computer Science.
CS15599 | SCS Honors Undergraduate Research Thesis | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15599&SEMESTER=S19 | instructors:Blelloch, GuyCortina, Thomas description:Available only to students registered in the CS Senior Research Thesis Program.
CS15604 | Immigration Course | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15604&SEMESTER=F18 | instructors:Eckhardt, DavidDannenberg, Roger description:This is a discussion course with enrollment limited to MS in CS  students during their first semester in the program. Students explore  the scope of graduate education in computer science, the tools and  techniques for success, and the resources available to MS in CS  students. Students also explore life after graduation, including  careers in academia, industry, and other organizations, and plan an  academic program that supports their individual goals.
CS15605 | Operating System Design and Implementation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15605&SEMESTER=S19 | instructors:Eckhardt, DavidRailing, Brian description:Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems.  The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware  simulator (and on actual PC hardware if you wish).  Work is done in two-person teams, and team programming skills (source control,  modularity, documentation) are emphasized.  The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security.    Students, especially graduate students, who have not satisfied the prerequisite at  Carnegie Mellon are strongly cautioned - to enter the class you must be able  to write a storage allocator in C, use a debugger, understand 2s-complement  arithmetic, and translate between C and x86 assembly language.  The  instructor may require you to complete a skills assessment exercise before  the first week of the semester in order to remain registered in the class.    Auditing:  this course is usually full, and we generally receive  many more requests to audit than we can accept.  If you wish to  audit, please have your advisor contact us before the semester  begins to discuss your educational goals.
CS15611 | Compiler Design | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15611&SEMESTER=F18 | instructors:Hoffmann, Jan description:This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization.      Prerequisites:  15213 or 15312
CS15612 | Operating System Practicum: Operating System Practicum | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15612&SEMESTER=F18 | instructors:Eckhardt, David prereq:15410 or 15605 description:The goal of this class is for students to acquire hands-on experience  with operating-system code as it is developed and deployed in the  real world.  Groups of two to four students will select, build,  install, and become familiar with an open-source operating system  project; propose a significant extension or upgrade to that project;  and develop a production-quality implementation meeting the coding  standards of that project.  Unless infeasible, the results will be  submitted to the project for inclusion in the code base.    Variations on this theme are possible at the discretion of the  instructor.  For example, it may be possible to work within the  context of a non-operating-system software infrastructure project  (window system, web server, or embedded network device kernel) or  to extend a 15-410 student kernel.  In some situations students  may work alone.  Group membership and unit count (9 units versus  12) will be decided by the third week of the semester.    Contributing to a real-world project will involve engaging  in some mixture of messy, potentially open-ended activities  such as: learning a revision control system, writing a  short design document, creating and updating a simple project  plan, participating in an informal code review, synthesizing  scattered information about hardware and software, classifying  and/or reading large amounts of code written by various people  over a long period of time, etc.
CS15614 | Bug Catching: Automated Program Verification | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15614&SEMESTER=F18 | instructors:Fredrikson, MatthewGoncalves Martins, Ruben Carlos description:Many CS and ECE students will be developing software and hardware that must be ultra reliable at some point in their careers. Logical errors in such designs can be costly, even life threatening. There have already been a number of well publicized errors like the Intel Pentium floating point error and the Arian 5 crash. In this course we will study tools for finding and preventing logical errors. Three types of tools will be studied: automated theorem proving, state exploration techniques like model checking and tools based on static program analysis. Although students will learn the theoretical basis for such tools, the emphasis will be on actually using them on real examples.  This course can be used to satisfy the Logic  Languages requirement for the Computer Science major.
CS15615 | Database ApplicationsThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15615&SEMESTER=F18 | instructors:Faloutsos, Christos description:This course covers the fundamental topics for Database Management   Systems: Database System Architectural Principles (ACID properties; data  abstraction; external, conceptual, and internal schemata; data   independence; data definition and data manipulation languages), Data   models (entity-relationship and relational data models; data   structures, integrity constraints, and operations for each data   model; relational query languages: SQL, algebra, calculus), Theory of   database design (functional dependencies; normal forms; dependency   preservation; information loss), Query Optimization (equivalence of   expressions, algebraic manipulation; optimization of selections and   joins), Storage Strategies (indices, B-trees, hashing), Query Processing  (execution of sort, join, and aggregation operators), and  Transaction Processing (recovery and concurrency control).
CS15618 | Parallel Computer Architecture and Programming | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15618&SEMESTER=S19 | instructors:Beckmann, NathanBryant, Randal description:The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project.
CS15619 | Cloud Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15619&SEMESTER=S19 | instructors:Sakr, Majd description:This course gives students an overview of Cloud Computing, which is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. Students will study its enabling technologies, building blocks, and gain hands-on experience through projects utilizing public cloud infrastructures.  Cloud computing services are widely adopted by many organizations across domains.  The course will introduce the cloud and cover the topics of data centers, software stack, virtualization, software defined networks and storage, cloud storage, and programming models. We will start by discussing the clouds motivating factors, benefits, challenges, service models, SLAs and security. We will describe several concepts behind data center design and management, which enable the economic and technological benefits of the cloud paradigm. Next, we will study how CPU, memory and I/O resources, network (SDN) and storage (SDS) are virtualized, and the key role of virtualization to enable the cloud. Subsequently, students will study cloud storage concepts like data distribution, durability, consistency and redundancy. We will discuss distributed file systems, NoSQL databases and object storage using HDFS, CephFS, HBASE, MongoDB, Cassandra, DynamoDB, S3, and Swift as case studies. Finally, students will study the MapReduce, Spark and GraphLab programming models.  Students will work with Amazon Web Services and Microsoft Azure, to rent and provision compute resources and then program and deploy applications using these resources. Students will develop and evaluate scaling and load balancing solutions, work with cloud storage systems, and develop applications in several programming paradigms. 15619 students must complete an extra team project which entails designing and implementing a cost- and performance-sensitive web-service for querying big data.
CS15621 | ST: Developing Blockchain Use Cases: Developing Blockchain Use Case | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15621&SEMESTER=S19 | instructors:Goyal, VipulMccarthy, MichaelZetlin-Jones, Ariel description:While the course will not be overly technical on any specific dimension, it will be hands on and you will need to be creative. Therefore, while there are no formal prerequisites, we expect students to have a background in economics, cryptography, or computer science and all students should have some basic comfortability with programming. We will do our best to create groups that feature a mix of existing knowledge. The overall goal is to deliver enough knowledge about the potential and capabilities of blockchain technologies to enable students interested in this space to develop their own uses cases or applications.
CS15622 | Introduction to Computer Music | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15622&SEMESTER=F18 | instructors:Stiles, Jesse description:Computers are used to synthesize sound, process signals, and  compose music. Personal computers have replaced studios full of sound  recording and processing equipment, completing a revolution that began with  recording and electronics. In this course, students will learn the  fundamentals of digital audio, basic sound synthesis algorithms, and  techniques for digital audio effects and processing. Students will apply  their knowledge in programming assignments using a very high-level  programming language for sound synthesis and composition. In a final  project, students will demonstrate their mastery of tools and techniques  through music composition or by the implementation of a significant  sound-processing technique.
CS15623 | Computer Music Systems and Information Processing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15623&SEMESTER=S19 | instructors:Dannenberg, Roger description:This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing.
CS15624 | Logical Foundations of Cyper-Physical Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15624&SEMESTER=F18 | instructors:Platzer, Andre description:Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding.  Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP.
CS15640 | Distributed Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15640&SEMESTER=S19 | instructors:Berger, DanielPillai, PadmanabhanSatyanarayanan, Mahadev prereq:15213 or 15513 description:The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems.  The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects.   As a consequence, competency in both the C and Java programming languages is required.
CS15641 | Computer Networks | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15641&SEMESTER=S19 | instructors:Sherry Martins, JustineSteenkiste, Peter description:The emphasis in this course will be on the basic performance and engineering trade-offs in the design and implementation of computer networks. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation.    The goal is for students to learn not only what computer networks are and how they work today, but also why they are designed the way they are and how they are likely to evolve in the future. We will draw examples primarily from the Internet. Topics to be covered include: network architecture, routing, congestion/flow/error control, naming and addressing,  peer-to-peer and the web, internetworking, and network security.
CS15645 | Database Systems: Database Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15645&SEMESTER=F18 | instructors:Pavlo, Andrew description:This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems will be used to illustrate these techniques and trade-offs. The course is appropriate for students with strong systems programming skills.
CS15649 | Seminar Data Systems: Capstone | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15649&SEMESTER=F18 | instructors:Sakr, MajdPavlo, Andrew description:This course series is designed for and exclusively used by the Systems track of the Masters in Computational Data Science.  Most students in this program will take section A, Seminar 1, in their first semester, section B, Seminar 2,  in their second semester and section C, Capstone, in their third and final semester.  As a series this is equivalent to a 48 unit capstone, spread out over the entire masters program.  The sequence will emphasize learning from state of the art technical talks at the beginning, evolving into recently written paper reading and multi-paper survey reporting, and end with a large project and project report.  The theme of all sections is large scale systems for big data processing, highly available distributed systems, data mining and machine learning, and broadly, data science.
CS15650 | Algorithms and Advanced Data Structures | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15650&SEMESTER=S19 | instructors:Mohimani, Hosein description:The objective of this course is to study general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course will have several programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead.
CS15651 | Algorithm Design and Analysis | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15651&SEMESTER=S19 | instructors:Woodruff, DavidGupta, Anupam description:This course is intended for SCS graduate students.  This course is about the design and analysis of algorithms. We study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols.
CS15652 | Foundation Programming Languages | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15652&SEMESTER=S19 | instructors:Balzer, StephanieHoffmann, Jan description:This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation.
CS15657 | Constructive Logic | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15657&SEMESTER=F18 | instructors:Crary, Karl description:This multidisciplinary junior-level course is designed to provide a thorough introduction to modern constructive logic, its roots in philosophy, its numerous applications in computer science, and its mathematical properties. Some of the topics to be covered are intuitionistic logic, inductive definitions, functional programming, type theory, realizability, connections between classical and constructive logic, decidable classes. This course counts as a Fundamentals course in the Computer Science major.
CS15659 | Probability and Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15659&SEMESTER=S19 | instructors:Harchol-Balter, Mor description:Probability theory has become indispensable in computer science.  In areas such as artificial intelligence and computer science theory, probabilistic methods and ideas based on randomization are central. In other areas such as networks and systems, probability is becoming an increasingly useful framework for handling uncertainty and modeling the patterns of data that occur in complex systems.  This course gives an introduction to probability as it is used in computer science theory and practice, drawing on applications and current research developments as motivation and context. Topics include combinatorial probability and random graphs, heavy tail distributions, concentration inequalities, various randomized algorithms, sampling random variables and computer simulation, and Markov chains and their many applications, from Web search engines to models of network protocols. The course will assume familiarity with 3-D calculus and linear algebra.
CS15662 | Computer Graphics | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15662&SEMESTER=S19 | instructors:Pollard, Nancy description:This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing.
CS15663 | Computational Photography | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15663&SEMESTER=F18 | instructors:Gkioulekas, Ioannis prereq:16385 or 16720 or 15462 or 18793 description:Computational photography is the convergence of computer graphics, computer vision and imaging. Its role is to overcome the limitations of the traditional camera, by combining imaging and computation to enable new and enhanced ways of capturing, representing, and interacting with the physical world.  This advanced undergraduate course provides a comprehensive overview of the state of the art in computational photography. At the start of the course, we will study modern image processing pipelines, including those encountered on mobile phone and DSLR cameras, and advanced image and video editing algorithms. Then we will proceed to learn about the physical and computational aspects of tasks such as 3D scanning, coded photography, lightfield imaging, time-of-flight imaging, VR/AR displays, and computational light transport. Near the end of the course, we will discuss active research topics, such as creating cameras that capture video at the speed of light, cameras that look around walls, or cameras that can see through tissue.  The course has a strong hands-on component, in the form of seven homework assignments and a final project. In the homework assignments, students will have the opportunity to implement many of the techniques covered in the class, by both acquiring their own images of indoor and outdoor scenes and developing the computational tools needed to extract information from them. For their final projects, students will have the choice to use modern sensors provided by the instructors (lightfield cameras, time-of-flight cameras, depth sensors, structured light systems, etc.).
CS15664 | Technical Animation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15664&SEMESTER=S19 | instructors:Pollard, Nancy description:This course introduces techniques for computer animation such as keyframing, procedural methods, motion capture, and simulation. The course also includes a brief overview of story-boarding, scene composition, lighting and sound track generation. The second half of the course will explore current research topics in computer animation such as dynamic simulation of flexible and rigid objects,automatically generated control systems, and evolution of behaviors. The course should be appropriate for graduate students in all areas and for advanced undergraduates.
CS15666 | Computer Game Programming | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15666&SEMESTER=F18 | instructors:McCann, James description:The goal of this course is to acquaint students with the code required to turn ideas into games. This includes both runtime systems -- e.g., AI, sound, physics, rendering, and networking -- and the asset pipelines and creative tools that make it possible to author content that uses these systems. In the first part of the course, students will implement small games that focus on specific runtime systems, along with appropriate asset editors or exporters. In the second part, students will work in groups to build a larger, polished, open-ended game project. Students who have completed the course will have the skills required to extend -- or build from scratch -- a modern computer game. Students wishing to take this class should be familiar with the C++ language and a basic understanding of the OpenGL API. If you meet these requirements but have not taken 15-462 (the format prerequisite), please contact the instructor.
CS15681 | Artificial Intelligence: Representation and Problem Solving | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15681&SEMESTER=F18 | instructors:Touretzky, DavidFang, Fei prereq:15211 description:This course is about the theory and practice of Artificial Intelligence. We will study modern techniques for computers to represent task-relevant information and make intelligent (i.e. satisficing or optimal) decisions towards the achievement of goals. The search and problem solving methods are applicable throughout a large range of industrial, civil, medical, financial, robotic, and information systems. We will investigate questions about AI systems such as: how to represent knowledge, how to effectively generate appropriate sequences of actions and how to search among alternatives to find optimal or near-optimal solutions. We will also explore how to deal with uncertainty in the world, how to learn from experience, and how to learn decision rules from data. We expect that by the end of the course students will have a thorough understanding of the algorithmic foundations of AI, how probability and AI are closely interrelated, and how automated agents learn. We also expect students to acquire a strong appreciation of the big-picture aspects of developing fully autonomous intelligent agents. Other lectures will introduce additional aspects of AI, including natural language processing, web-based search engines, industrial applications, autonomous robotics, and economic/game-theoretic decision making.
CS15686 | Neural Computation | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15686&SEMESTER=S19 | instructors:Lee, Tai-Sing prereq:15112 and 21122 description:Computational neuroscience is an interdisciplinary science that seeks to understand how the brain computes  to achieve  natural intelligence.  It seeks to understand the computational principles and mechanisms of intelligent behaviors and mental abilities -- such as perception, language, motor control, and learning -- by building artificial systems and computational models with the same capabilities. This course explores how neurons encode and process information, adapt and learn, communicate, cooperate, compete and compute at the individual level as well as at the levels of networks and systems. It will introduce basic concepts in computational modeling, information theory, signal processing, system analysis, statistical and probabilistic inference. Concrete examples will be drawn from the visual system and the motor systems,  and studied from computational, psychological and biological perspectives. Students will learn to perform computational experiments using Matlab and quantitative studies of neurons and neuronal networks.
CS15689 | Independent Study in the Computer Sciences | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15689&SEMESTER=S19 | instructors:Dannenberg, RogerEckhardt, David description:This course is for Masters students who plan to do an Independent Study in the Master of Science program within the Computer Science Department - SECTION A or enrolled in the ISR Master of Computational Data Science program SECTION B.  You will be placed on the waitlist until your advisor gives you permission to proceed.
CS15694 | Cognitive Robotics | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15694&SEMESTER=S19 | instructors:Touretzky, David prereq:15214 description:Cognitive robotics is a new approach to robot programming based on    high level primitives for perception and action. These primitives draw    inspiration from ideas in cognitive science combined with state of the    art robotics algorithms. Students will experiment with these    primitives and help develop new ones using the Tekkotsu software    framework on the Calliope robot, which includes a 5 degree-of-freedom    arm with gripper, a Kinect camera on a pan/tilt mount, and Ubuntu    Linux on a dual-core on-board netbook. Prior robotics experience is    not necessary, but strong programming skills are required.  Good Programming Skills Required
CS15697 | Graduate Reading and Research | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15697&SEMESTER=S19 | instructors:Farbacher, Tracy description:None
CS15712 | Advanced Operating Systems and Distributed Systems: Advanced Operating Systems and Distributed Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15712&SEMESTER=S19 | instructors:Andersen, David description:This is a graduate course in operating systems. The goals are: To understand the state of the art in operating systems and distributed systems, and how and why we got there. To understand how to engage in systems research. To investigate novel ideas in systems through a semester-long research project. Please refer to http://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15719 | Advanced Cloud Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15719&SEMESTER=S19 | instructors:Sakr, MajdAmvrosiadis, GeorgiosGanger, Gregory prereq:15213 or 18213 or 15513 description:Computing in the cloud has emerged as a leading paradigm for cost-effective, scalable, well-managed computing. Users pay for services provided in a broadly shared, power efficient datacenter, enabling dynamic computing needs to be met without paying for more than is needed. Actual machines may be virtualized into machine-like services, or more abstract programming platforms, or application-specific services, with the cloud computing infrastructure managing sharing, scheduling, reliability, availability, elasticity, privacy, provisioning and geographic replication  This course will survey the aspects of cloud computing by reading about 30 papers and articles, executing cloud computing tasks on a state of the art cloud computing service, and implementing a change or feature in a state of the art cloud computing framework. There will be no final exam, but there will be two in class exams. Grades will be about 50 project work and about 50 examination results.    Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15721 | Database Systems: Advanced Database Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15721&SEMESTER=S19 | instructors:Pavlo, Andrew prereq:15445 or 15645 description:This course is a comprehensive study of the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. All class projects will be in the context of a real in-memory, multi-core database system. The course is appropriate for graduate students in software systems and for advanced undergraduates with dirty systems programming skills. PREREQUISITES: The prerequisites are (1) 15-445/645 or an equivalent undergraduate class in databases and (2) 15-410 or an equivalent undergraduate class in operating systems. Students that are unable to meet these requirements must otherwise receive permission from the instructor.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15740 | Computer Architecture: Computer Architecture | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15740&SEMESTER=F18 | instructors:Beckmann, Nathan description:Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates. COURSES BEGIN THE WEEK OF SEPTEMBER 3rd.
CS15744 | Computer Networks: Computer NetworksThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15744&SEMESTER=F18 | prereq:15440 or 15441 or 15410 description:15-744 is a graduate course in computer networks. The goals are:  - To understand the state of the art in network protocols, network architecture, and networked systems. - To understand how to engage in networking research. - To investigate novel ideas in networking through a semester-long research project.  The past few years have seen a remarkable growth in the global network infrastructure. The Internet has grown from a research curiosity to something we all take for granted. How does this network infrastructure work? What are the design principles upon which it is based, and how are those principles applied in practice? How can we make the Internet work better today? We will examine these issues and more during the course.  PREREQUISITES:  The prerequisite will be 15-441/440/410 or an equivalent undergraduate class in Systems.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates. COURSES BEGIN THE WEEK OF SEPTEMBER 3rd.
CS15745 | Optimizing Compilers for Modern Architectures | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15745&SEMESTER=S19 | instructors:Gibbons, Phillip description:15-745 is a graduate course in optimizing compilers for modern architectures. The learning objectives are:      To understand the salient techniques used in building optimizing compilers that effectively exploit modern processor architectures.     To gain hands-on experience in implementing significant optimizations within the framework of a modern research compiler.     To investigate novel ideas in optimizing compilers through a six-week long research project.   Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15746 | Storage Systems: Storage Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15746&SEMESTER=F18 | instructors:Amvrosiadis, GeorgiosGanger, Gregory prereq:15513 and 15213 and 18213 description:Storage systems are among the most fascinating and the most important parts of computer systems. They often dominate the performance of a system, and their components inner workings require amazing feats of engineering. At the same time, storage systems hold the crown jewels of most organizations: their information (from source code to Microsofts software to the sales databases of every e-commerce site). Within the field of computer systems and computer engineering, there is no area whose demand for bright people and better solutions is more robust.   This course will cover the design, implementation, and use of storage systems, from the characteristics and operation of individual storage devices to the OS, database, and networking approaches involved in tying them together and making them useful. Along the way, we will examine several case studies of real systems, demands placed on storage systems by important applications, and impacts of trends and emerging technologies on future storage systems.   For those familiar with 18-316 (Intro. to Data Storage Systems Technology) and 18-517 (Data Storage Systems Design Project): one should consider these courses as distinct and complementary, with neither being a pre-requisite to the other. 18-316 and 18-517 focus on the low-level technologies (magnetics, materials, applied physics, etc.) whereas 746 focuses on storages incorporation and role in computer systems.     Pre-requisite of 15-213, 15-513, or 18-213 - Grade of B- or better.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates.
CS15750 | Graduate Algorithms | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15750&SEMESTER=S19 | instructors:Miller, Gary description:The course will cover a fairly wide range of topics in algorithm design. Some of the topics will be quite a bit older work from the 1960s to more recent work from this century. We hope to present as many different tools and algorithms as time permits. Most topics will be covered in two phases. In the first we will cover an important design technique by presenting a classic possibly simple application. In the second, an application will be presented that hopefully will be one that is new to most of the class. By the end of the class students are expected to be able to recognize which tool or method to apply to a problem and reasonably proficient at using this tool. We also feel that the student should be able to explain their algorithmic design idea to their peers and supervisors both in writing and orally. This is why we require both written and oral presentations of homework. Please check the preliminary schedule for an idea of the possible topics to be covered. The schedule at this point is mostly a list of topics covered some five years ago. The schedule will be updated with several newer topics.   Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15780 | Graduate Artificial Intelligence | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15780&SEMESTER=S19 | instructors:Shah, Nihar BhadreshKolter, Jeremy description:This course is targeted at graduate students who are interested in learning about artificial intelligence. The focus is on modern AI techniques. The course also covers techniques from the intersection of AI and other disciplines such as integer programming, continuous optimization, and game theory. The course content is profiled so as to not have too much overlap with narrower specialized AI courses offered at CMU. Please refer to http://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15801 | CS PhD Alternative Elective | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15801&SEMESTER=S19 | description:None
CS15802 | CSD PhD Elective | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15802&SEMESTER=S19 | prereq:(15781 or 10601) and (36705 or 36725) description:Please refer to this link for the most recent schedule updates.
CS15803 | CSD PhD Elective | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15803&SEMESTER=F18 | description:None
CS15804 | CSD PhD Elective | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15804&SEMESTER=F18 | description:None
CS15812 | Programming Language Semantics | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15812&SEMESTER=S19 | instructors:Brookes, Stephen description:This lecture course introduces the foundational concepts and techniques of programming language semantics. The aim is to demonstrate the utility of a scienti_c approach, based on mathematics and logic, with applications to program analysis, language design, and compiler correctness. We focus on the most widely applicable frameworks for semantic description: denotational, operational, and axiomatic semantics. We use semantics to analyze program behavior, guide the development of correct programs, prove correctness of a compiler, validate logics for program correctness, and derive general laws of program equivalence. We discuss a variety of imperative and functional languages, sequential and parallel, as time permits. Please refer to http://www.cs.cmu.edu/csd-grad/courseschedules19.html this link for the most recent schedule updates.
CS15814 | Types and Programming Languages | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15814&SEMESTER=F18 | instructors:Pfenning, Frank description:The course studies the theory of type systems, with a focus on applications of type systems to practical programming languages. The emphasis is on the mathematical foundations underlying type systems and operational semantics. The course includes a broad survey of the components that make up existing type systems, and also teaches the methodology behind the design of new type systems.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates. COURSES BEGIN THE WEEK OF SEPTEMBER 3rd.
CS15819 | Advanced Topics in Programming Languages:: COM TT | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15819&SEMESTER=S19 | instructors:Harper, Robert description:SECTION Y: Computational Higher Type Theory:  Computational type theory has its origins in Martin-Lfs Constructive Mathematics and Computer Programming. That paper provided the foundation for the NuPRL type theory and implementation, which has been under continual development at Cornell since the early 1980s. Unlike formal type theory, computational type theory begins with the notion of program, and defines types as specifications of program behavior. This leads to a very rich type theory that encompasses the usual logically-motivated types and extends it with many concepts motivated directly by computation. With types being defined semantically, the role of proof theory is entirely pragmatic, supporting implementation, rather than definitional or conceptual....   Please refer to http://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15821 | Mobile and Pervasive Computing | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15821&SEMESTER=F18 | instructors:Siewiorek, DanielSatyanarayanan, Mahadev description:This is a course exploring research issues in mobile computing and its close relative, pervasive computing (aka Internet of Things (IoT)).   Many traditional areas of computer science and computer engineering are impacted by the constraints and demands of mobile and pervasive computing. The course will offer significant hands-on experience:  students will work in small groups under the guidance of a mentor on a project. Each student will present a research paper from the literature in a conference-style 30-minute  talk.      In teams of two,  students will present a short (30 minutes) overview of the commercial landscape for one of the topics covered in class.  There will a brief quiz at the start of each class, based on the readings  for that class.  Prerequisites Knowledge of operating systems, distributed systems, and computer architecture.   If in doubt, check with one of the instructors before registering.   Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates.
CS15824 | Logical Foundations of Cyber-Physical Systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15824&SEMESTER=F18 | instructors:Platzer, Andre description:Cyber-physical systems (CPSs) combine cyber capabilities (computation and/or communication) with physical capabilities (motion or other physical processes). Cars, aircraft, and robots are prime examples, because they move physically in space in a way that is determined by discrete computerized control algorithms. Designing these algorithms to control CPSs is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding. In this course we will strive to answer the fundamental question posed by Jeannette Wing:      How can we provide people with cyber-physical systems they can bet their lives on? Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates.
CS15827 | Special Topics in Cryptography: Blockchains and Cryptocurrencies: BLOCKCHN &amp; CRPTOThis Section Cancelled | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15827&SEMESTER=S19 | instructors:Goyal, Vipul description:Please refer to http://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15829 | Special Topics in Software Systems: Performance Engineering of Software Systems: PROG NTWKS | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15829&SEMESTER=F18 | instructors:Sherry Martins, Justine description:Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates. COURSES BEGIN THE WEEK OF SEPTEMBER 3rd.
CS15848 | Practical information and coding theory for computer systems | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15848&SEMESTER=F18 | instructors:Vinayak, Rashmi Korlakai description:Emerging computing systems often operate in regimes where they are prone to failures, high variance in performance, and tight constraints on resources. This brings up the critical challenge of introducing resource-efficient redundancy at various levels of the system stack. The domain of information and coding theory (error-correcting-codes) provides many valuable tools to address this challenge, and these are increasingly finding their way into modern computer systems. In this course, we will cover practical tools from information and coding theory relevant to computer systems. Along the way, we will learn how these tools have impacted real-world systems through case studies. Coding-theoretic approach to computing often leads to insightful tradeoffs and surprising results. As such, this course should be of interest to both students interested in computer systems/networking and students interested in applied theory.
CS15850 | Advanced Algorithms: Advanced Algorithms | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15850&SEMESTER=F18 | instructors:Gupta, Anupam description:Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates.  http://www.cs.cmu.edu/15850/
CS15858 | Discrete Differential Geometry: Discrete Differential Geometry | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15858&SEMESTER=S19 | instructors:Crane, Keenan description:This course focuses on algorithms for three-dimensional geometry      processing, while simultaneously providing a first course in traditional      differential geometry. Students will learn how fundamental geometric      concepts (like curvature) can be understood from complementary      computational and mathematical points of view. This dual perspective      enriches understanding on both sides, and leads to the development of      practical algorithms for working with real-world geometric data. Along      the way we will revisit important ideas from calculus and (numerical)      linear algebra, putting a strong emphasis on intuitive, visual      understanding that complements the more traditional formal, algebraic      treatment. The course provides essential mathematical background as well      as a large array of real-world examples and applications. It also      provides a short survey of recent developments in digital geometry      processing and discrete differential geometry. Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates
CS15859 | Special Topics in Theory:: ALG SUPWR RAND | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15859&SEMESTER=S19 | instructors:Haeupler, Bernhard description:SECTION Z: ALGORITHMIC SUPERPOWER RANDOMIZATION; Randomness has proven as an incredibly powerful resource for developing beautiful, simple, and efficient algorithms with provable performance guarantees. Algorithmic Superpower Randomization is a research centered special topics graduate course that will teach how YOU can unleash the power of randomization in YOUR research.  Together we will explore a biased random sample of both classical and modern topics in theoretical computer science related to randomness and algorithms. The tentative list of topics includes:  The Probabilistic Method Error Correcting Codes Distributed Algorithms (Maximal Independent Set, ...) Approximate Limited Independence and Applications (Derandomization, Identity Testing, Hashing, ...) Algorithms for the Lovasz Local Lemma Communication Complexity and Coding for Interactive Communications This course might be particularly interesting to you if you are a graduate (or a very strong undergraduate) student who wants to do theoretical computer science research. We will very interactively discuss and jointly (re-)discover solutions to the problems covered in class. We will also constantly try to identify and examine possible ways to extend or branch off existing solutions and results.  Network Coding Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15862 | Computational Photography | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15862&SEMESTER=F18 | instructors:Gkioulekas, Ioannis prereq:16720 or 18793 or 15462 or 16385 description:DESCRIPTION: Computational photography is the convergence of computer graphics, computer vision and imaging. Its role is to overcome the limitations of the traditional camera, by combining imaging and computation to enable new and enhanced ways of capturing, representing, and interacting with the physical world. This advanced undergraduate course provides a comprehensive overview of the state of the art in computational photography. At the start of the course, we will study modern image processing pipelines, including those encountered on mobile phone and DSLR cameras, and advanced image and video editing algorithms. Then we will proceed to learn about the physical and computational aspects of tasks such as 3D scanning, coded photography, lightfield imaging, time-of-flight imaging, VR/AR displays, and computational light transport. Near the end of the course, we will discuss active research topics, such as creating cameras that capture video at the speed of light, cameras that look around walls, or cameras that can see through tissue. The course has a strong hands-on component, in the form of seven homework assignments and a final project. In the homework assignments, students will have the opportunity to implement many of the techniques covered in the class, by both acquiring their own images of indoor and outdoor scenes and developing the computational tools needed to extract information from them. For their final projects, students will have the choice to use modern sensors provided by the instructors (lightfield cameras, time-of-flight cameras, depth sensors, structured light systems, etc.). Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates.
CS15869 | Special Topics in Graphics:: ALG TEXT DESGN | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15869&SEMESTER=S19 | instructors:McCann, James description:ALGORITHMIC TEXTILES DESIGN - Section K: extile artifacts are -- quite literally -- all around us; from clothing to carpets to car seats. These items are often produced by sophisticated, computer-controlled fabrication machinery. In this course we will discuss everywhere code touches textiles fabrication, including design tools, simulators, and machine control languages. Students will work on a series of multi-week, open-ended projects, where they use code to create patterns for modern sewing/embroidery, weaving, and knitting machines; and then fabricate these patterns in the textiles lab. Students in the 800-level version of the course will additionally be required to create a final project that develops a new algorithm, device, or technique in textiles fabrication.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15880 | Advanced Topics in the Cognitive and Computational Sciences: Advanced Topics in the Cognitive and Computational Sciences | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15880&SEMESTER=S19 | instructors:Blum, ManuelBlum, Lenore description:Course Description Thanks to major advances in neuroscience, we are on the brink of a scientific understanding of how the brain achieves consciousness.   This course will investigate a tiny fraction of the vast literature on consciousness.  The initial lectures will discuss neuroscientist Bernard Baars Global Workspace Model (GWM) of the brain, its implications for understanding consciousness, and the novel computer architecture that it inspires.  The Global Workspace Model gives insight for the design of machines that truly experience (not just simulate the appearance of) feelings such as the ecstasy of joy and the agony of pain.    The goal of this course is to develop a formal model of a Conscious Computer for the specific purpose of defining and understanding consciousness and the generation of emotions. We call the simplified model the Conscious Turing Machine (CTM) or Conscious AI (CAI).  The CTM is intended to model a conscious robot somewhat the way a standard Turing Machine (TM) models a Computer: Whereas the purpose of the TM definition is to study computability and complexity, the purpose of the CTM is to understand consciousness, including in particular what Chalmers calls The Hard Problem.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedules19.html for the most recent schedule updates.
CS15890 | Computer Science Pedagogy | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15890&SEMESTER=F18 | instructors:Garrod, CharlesHilton, Michael description:A broad introduction to Computer Science Pedagogy. Enrollment by special permission only. In Fall 2018 the topic is CS pedagogy for mobile application software engineering. Students will develop, implement, and test curricular content for a college-level mobile applications software engineering course. Although the course focus is on CS pedagogy and developing curricular content, students will learn some fundamentals of modern mobile application programming.
CS15896 | Truth, Justice, and Algorithms: Truth, Justice and Algorithms | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15896&SEMESTER=F18 | instructors:Procaccia, ArielPsomas, Christos Alexan description:Truth, Justice, and Algorithms is an interdisciplinary course that covers selected theoretical topics at the interface of computer science and economics. The courses topics include: computational social choice, e.g., voting rules as maximum likelihood estimators, the axiomatic approach to ranking systems and crowdsourcing, manipulation of elections and ways to circumvent it; cooperative games, focusing on solution concepts such as the core and the Shapley value, and their computation; fair division algorithms for allocating divisible and indivisible goods, and approximate notions of fairness; online matching algorithms (competitive analysis, not dating) and kidney exchange; noncooperative games, including Nash equilibrium and correlated equilibrium, their computation, connections to learning theory, Stackelberg security games, and the price of anarchy in congestion and routing games; and topics in social networks such as the diffusion of technologies and influence maximization.  Please refer to https://www.cs.cmu.edu/csd-grad/courseschedulef18.html for the most recent schedule updates - Class will not begin until the week of September 4th.
CS15990 | Computer Science Colloquium | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15990&SEMESTER=S19 | description:None
CS15996 | Introductory Course for CS Doctoral Students (IC) | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15996&SEMESTER=F18 | instructors:Mowry, Todd description:This orientation course is required for incoming Computer Science Department doctoral students.
CS15997 | Graduate Reading and Research | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15997&SEMESTER=S19 | instructors:Mowry, Todd description:None
CS15998 | Practicum in Computer Science | https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15998&SEMESTER=S19 | instructors:Mowry, Todd description:None
